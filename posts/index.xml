<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - Zhao&#39;s blog</title>
        <link>http://localhost:1313/posts/</link>
        <description>所有文章 | Zhao&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 22 Jan 2024 00:00:00 &#43;0800</lastBuildDate><atom:link href="http://localhost:1313/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Linux Kernel 进程地址空间</title>
    <link>http://localhost:1313/posts/linux-kernel-%E8%BF%9B%E7%A8%8B%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4/</link>
    <pubDate>Mon, 22 Jan 2024 00:00:00 &#43;0800</pubDate><author>
        <name>Zhao</name>
    </author><guid>http://localhost:1313/posts/linux-kernel-%E8%BF%9B%E7%A8%8B%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4/</guid>
    <description><![CDATA[内核需要管理用户空间中进程的内存。Linux 采用虚拟内存技术，系统中的所有进程之间以虚拟方式共享内存。 对一个进程而言，它好像可以访问整个系统]]></description>
</item><item>
    <title>Linux Kernel 块 I/O 层</title>
    <link>http://localhost:1313/posts/linux-kernel-%E5%9D%97-i-o-%E5%B1%82/</link>
    <pubDate>Mon, 22 Jan 2024 00:00:00 &#43;0800</pubDate><author>
        <name>Zhao</name>
    </author><guid>http://localhost:1313/posts/linux-kernel-%E5%9D%97-i-o-%E5%B1%82/</guid>
    <description><![CDATA[剖析一个块设备块设备中最小的可寻址单元是扇区。扇区大小一般为 2 的整数倍，最常见的是 512 字节。扇区的大小是设备的物理属性，扇区是所有块设备的基本]]></description>
</item><item>
    <title>Linux Kernel 虚拟文件系统</title>
    <link>http://localhost:1313/posts/linux-kernel-%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</link>
    <pubDate>Sun, 21 Jan 2024 00:00:00 &#43;0800</pubDate><author>
        <name>Zhao</name>
    </author><guid>http://localhost:1313/posts/linux-kernel-%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</guid>
    <description><![CDATA[文件系统抽象层虚拟文件系统（VFS）作为内核子系统，为用户空间程序提供了文件和文件系统相关的接口。系统中所有文件系统不但依赖 VFS 共存，而且也依]]></description>
</item><item>
    <title>Linux Kernel 内存管理</title>
    <link>http://localhost:1313/posts/linux-kernel-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
    <pubDate>Sat, 20 Jan 2024 00:00:00 &#43;0800</pubDate><author>
        <name>Zhao</name>
    </author><guid>http://localhost:1313/posts/linux-kernel-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
    <description><![CDATA[页内核把物理页作为内存管理的基本单位。尽管处理器的最小可寻址单位通常为字（甚至字节），但是，内存管理单元（MMU,管理内存并把虚拟地址转换为]]></description>
</item><item>
    <title>C/C&#43;&#43;程序的执行</title>
    <link>http://localhost:1313/posts/c-c-plus-plus-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%89%A7%E8%A1%8C/</link>
    <pubDate>Fri, 19 Jan 2024 00:00:00 &#43;0800</pubDate><author>
        <name>Zhao</name>
    </author><guid>http://localhost:1313/posts/c-c-plus-plus-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%89%A7%E8%A1%8C/</guid>
    <description><![CDATA[shell 的重要性用户输入命令名并按回车，shell 会将输入的命令名与自身内置的命令进行对比。如果程序名不是 shell 支持的命令，那么 shell 就会尝试定位文件名与]]></description>
</item><item>
    <title>Linux Kernel 进程管理</title>
    <link>http://localhost:1313/posts/linux-kernel-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</link>
    <pubDate>Fri, 19 Jan 2024 00:00:00 &#43;0800</pubDate><author>
        <name>Zhao</name>
    </author><guid>http://localhost:1313/posts/linux-kernel-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</guid>
    <description><![CDATA[进程描述符内核把进程的列表存放在叫做任务队列（task list）的双向循环链表中。链表中的每一项都是类型为 task_struct、称为进程描]]></description>
</item><item>
    <title>LevelDb 源码阅读 二：基本原理</title>
    <link>http://localhost:1313/posts/leveldb-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%BA%8C-%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</link>
    <pubDate>Wed, 17 Jan 2024 00:00:00 &#43;0800</pubDate><author>
        <name>Zhao</name>
    </author><guid>http://localhost:1313/posts/leveldb-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%BA%8C-%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</guid>
    <description><![CDATA[[LevelDB] 存储1：一目了然 —— 数据库包含哪些文件 - 知乎 LevelDB 源码分析「五、Sorted Table」 | SF-Zhou&rsquo;s Blog 每个 LevelDB 数据库由目录中的一组文件表示，文件类型有 L]]></description>
</item><item>
    <title>LevelDB 源码阅读 零</title>
    <link>http://localhost:1313/posts/leveldb-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E9%9B%B6/</link>
    <pubDate>Wed, 17 Jan 2024 00:00:00 &#43;0800</pubDate><author>
        <name>Zhao</name>
    </author><guid>http://localhost:1313/posts/leveldb-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E9%9B%B6/</guid>
    <description><![CDATA[google/leveldb: LevelDB is a fast key-value storage library written at Google that provides an ordered mapping from string keys to string values. 简介 Features Keys and values are arbitrary byte arrays. Data is stored sorted by key. Callers can provide a custom comparison function to override the sort order. The basic operations are Put(key,value), Get(key), Delete(key) . Multiple changes can be made in one atomic batch. Users can create]]></description>
</item><item>
    <title>LevelDB 源码阅读 一：公开接口</title>
    <link>http://localhost:1313/posts/leveldb-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%B8%80-%E5%85%AC%E5%BC%80%E6%8E%A5%E5%8F%A3/</link>
    <pubDate>Wed, 17 Jan 2024 00:00:00 &#43;0800</pubDate><author>
        <name>Zhao</name>
    </author><guid>http://localhost:1313/posts/leveldb-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB-%E4%B8%80-%E5%85%AC%E5%BC%80%E6%8E%A5%E5%8F%A3/</guid>
    <description><![CDATA[LevelDB 作为库，对外公开的接口是 include/leveldb/*.h 。 1 2 cd $leveldb ls include/leveldb 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 cache.h c.h comparator.h db.h dumpfile.h env.h export.h filter_policy.h iterator.h options.h slice.h status.h table_builder.h table.h write_batch.h db.h，操作 DB 的主要接口 option]]></description>
</item><item>
    <title>使用 QEMU 和 GDB 调试 Linux 内核</title>
    <link>http://localhost:1313/posts/%E4%BD%BF%E7%94%A8-qemu-%E5%92%8C-gdb-%E8%B0%83%E8%AF%95-linux-%E5%86%85%E6%A0%B8/</link>
    <pubDate>Wed, 17 Jan 2024 00:00:00 &#43;0800</pubDate><author>
        <name>Zhao</name>
    </author><guid>http://localhost:1313/posts/%E4%BD%BF%E7%94%A8-qemu-%E5%92%8C-gdb-%E8%B0%83%E8%AF%95-linux-%E5%86%85%E6%A0%B8/</guid>
    <description><![CDATA[编辑 .envrc 1 2 3 #!/bin/bash export CROSS_COMPILE=/opt/arm/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu- export ARCH=arm64 编译内核 kernel 下载内核版本 linux-5.4.50 配置编译选项 1 2 3 make defconfig make menuconfig make 制作根文件系统（busybox） 配置编译选项 1 2 3 make menuconfig make -j4 make install menuconfig 时]]></description>
</item></channel>
</rss>
